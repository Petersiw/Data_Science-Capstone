df2 <- melt(df1, id = "n")
df2
ggplot(data = df2, aes(x = n, y = value, colour = variable)) +
geom_line() +
labs(title = "Plot of R Squared and Adjusted R Squared against the Number
of Variables", x = "Number of Variables",
y = "R Squared and Adjusted R Squared") +
theme(plot.title = element_text(hjust = 0.5)) +
theme(legend.position = "bottom", legend.title = element_blank()) +
geom_vline(xintercept = 4, colour = "orchid4", linetype = "twodash")
runApp('Final_Project')
runApp('Final_Project')
runApp('Final_Project')
runApp('Final_Project')
runApp('Final_Project')
runApp('Final_Project')
runApp('Final_Project')
runApp('Final_Project')
runApp('Final_Project')
runApp('Final_Project')
runApp('Final_Project')
runApp('Final_Project')
rsconnect::deployApp("/desktop/Final_Project")
rsconnect::deployApp("~/desktop/Final_Project")
rsconnect::deployApp("~/desktop/Final_Project")
# Chunk 1
summary(cars)
# Chunk 2
plot(cars)
knitr::opts_chunk$set(echo = FALSE)
summary(cars)
plot(pressure)
install.packages("gridExtra")
library(gridExtra)
runApp('Final_Project')
p1 <- ggplot(data = aq, aes(x = Temp, y = Ozone)) +
geom_point(colour = "steelblue") +
labs(title = expression("$Ozone~=~\beta_{0}~+~\beta_{1}Temp$"),
x = "Temperature", y = "Ozone Level") +
theme(plot.title = element_text(hjust = 0.5)) +
geom_smooth(method = "lm",
formula = y ~ poly(x, 1),
colour = "red", se = F)
p1
p1 <- ggplot(data = aq, aes(x = Temp, y = Ozone)) +
geom_point(colour = "steelblue") +
labs(title = expression(Ozone~=~\beta_{0}~+~\beta_{1}Temp$),
x = "Temperature", y = "Ozone Level") +
theme(plot.title = element_text(hjust = 0.5)) +
geom_smooth(method = "lm",
formula = y ~ poly(x, 1),
colour = "red", se = F)
p1
p1 <- ggplot(data = aq, aes(x = Temp, y = Ozone)) +
geom_point(colour = "steelblue") +
labs(title = expression(Ozone~=~\beta_{0}~+~\beta_{1}Temp),
x = "Temperature", y = "Ozone Level") +
theme(plot.title = element_text(hjust = 0.5)) +
geom_smooth(method = "lm",
formula = y ~ poly(x, 1),
colour = "red", se = F)
p1
p1 <- ggplot(data = aq, aes(x = Temp, y = Ozone)) +
geom_point(colour = "steelblue") +
labs(title = expression(Ozone~=~\beta_{0}~+~\beta_{1}Temp),
x = "Temperature", y = "Ozone Level") +
theme(plot.title = element_text(hjust = 0.5)) +
geom_smooth(method = "lm",
formula = y ~ poly(x, 1),
colour = "red", se = F)
p1 <- ggplot(data = aq, aes(x = Temp, y = Ozone)) +
geom_point(colour = "steelblue") +
labs(title = expression(Ozone~=~\beta_{0}~+~\beta_{1}Temp),
x = "Temperature", y = "Ozone Level") +
theme(plot.title = element_text(hjust = 0.5)) +
geom_smooth(method = "lm",
formula = y ~ poly(x, 1),
colour = "red", se = F)
p1 <- ggplot(data = aq, aes(x = Temp, y = Ozone)) +
geom_point(colour = "steelblue") +
labs(title = (expression(Ozone~=~\beta_{0}~+~\beta_{1}Temp)),
x = "Temperature", y = "Ozone Level") +
theme(plot.title = element_text(hjust = 0.5)) +
geom_smooth(method = "lm",
formula = y ~ poly(x, 1),
colour = "red", se = F)
p1 <- ggplot(data = aq, aes(x = Temp, y = Ozone)) +
geom_point(colour = "steelblue") +
labs(title = (italic(Ozone=~beta_{0} + ~beta_{1}Temp)),
x = "Temperature", y = "Ozone Level") +
theme(plot.title = element_text(hjust = 0.5)) +
geom_smooth(method = "lm",
formula = y ~ poly(x, 1),
colour = "red", se = F)
p1 <- ggplot(data = aq, aes(x = Temp, y = Ozone)) +
geom_point(colour = "steelblue") +
labs(title = (italic(Ozone=~beta_{0} + ~beta_{1}Temp))) +
# x = "Temperature", y = "Ozone Level") +
theme(plot.title = element_text(hjust = 0.5)) +
geom_smooth(method = "lm",
formula = y ~ poly(x, 1),
colour = "red", se = F)
runApp('Final_Project')
runApp('Final_Project')
runApp('Final_Project')
library(rsconnect)
rsconnect::deployApp(~/Desktop/Final_Project)
rsconnect::deployApp("~/Desktop/Final_Project")
runApp('Final_Project')
runApp('Final_Project')
runApp('Final_Project')
runApp('Final_Project')
runApp('Final_Project')
runApp('Final_Project')
rsconnect::deployApp("~/Desktop/Final_Project")
current
library(gridExtra)
library(grid)
with(airquality,
plot(temp))
with(airquality,
plot(Temp))
with(airquality,
plot(Temp, type = 2))
?plot
with(airquality,
plot(Temp, type = "l"))
load(airquality)
attach(airquality)
Temp
t_diff <- airquality$Temp[2:,]
t_diff <- airquality$Temp[2: ,]
t_diff <- airquality$Temp[2:]
t_diff <- (airquality$Temp)[2:]
t_diff <- airquality$Temp
t_diff[2:]
t_diff[2:
t_diff[2:
]
t_diff <- airquality$Temp[-1]
t_diff <- airquality$Temp[1:length(airquality$Temp)-1] - airquality$Temp[-1]
plot(t_diff)
?plot
plot(t_diff, pch = 20)
plot(t_diff, pch = 20, cex = 2)
plot(t_diff, pch = 20, cex = 0.5)
plot(t_diff, pch = 20, cex = 1.5)
plot(t_diff, pch = 20, cex = 1.5, alpha = 0.4)
??Rcmdr
m1 <- glm(formula = (Ozone ~ poly(Temp, 4)), data = airquality)
summary(m1)
aq <- airquality[complete.cases(airquality), ]
n <- seq(1, 15, by = 1)
df1 <- data.frame(n = c(1:length(n)), r2 = rep(NA, length(n)),
adj_r2 = rep(NA, length(n)))
colnames(df1) <- c("n", "R Squared", "Adjusted R Squared")
for(i in 1:length(n)) {
m <- lm(formula = (formula = Ozone ~ poly(Temp, i)), data = aq)
df1[i, 2] <- summary(m)$r.squared
df1[i, 3] <- summary(m)$adj.r.squared
}
library(reshape2)
df2 <- melt(df1, id = "n")
ggplot(data = df2, aes(x = n, y = value, colour = variable)) +
geom_line() +
labs(title = "Plot of R Squared and Adjusted R Squared against the Number
of Variables", x = "Number of Variables",
y = "R Squared and Adjusted R Squared") +
theme(plot.title = element_text(hjust = 0.5)) +
theme(legend.position = "bottom", legend.title = element_blank()) +
geom_vline(xintercept = 4, colour = "orchid4", linetype = "twodash")
with(airquality,
plot(Temp, type = "l"))
attach(airquality)
t_diff <- airquality$Temp[1:length(airquality$Temp)-1] - airquality$Temp[-1]
plot(t_diff, pch = 20, cex = 1.5, color)
plot(t_diff, pch = 20, cex = 1.5, color = "red")
plot(t_diff, pch = 20, cex = 1.5, col = "red")
library(ggplot2)
m1 <- glm(formula = (Ozone ~ poly(Temp, 4)), data = airquality)
summary(m1)
aq <- airquality[complete.cases(airquality), ]
n <- seq(1, 15, by = 1)
df1 <- data.frame(n = c(1:length(n)), r2 = rep(NA, length(n)),
adj_r2 = rep(NA, length(n)))
colnames(df1) <- c("n", "R Squared", "Adjusted R Squared")
for(i in 1:length(n)) {
m <- lm(formula = (formula = Ozone ~ poly(Temp, i)), data = aq)
df1[i, 2] <- summary(m)$r.squared
df1[i, 3] <- summary(m)$adj.r.squared
}
library(reshape2)
df2 <- melt(df1, id = "n")
ggplot(data = df2, aes(x = n, y = value, colour = variable)) +
geom_line() +
labs(title = "Plot of R Squared and Adjusted R Squared against the Number
of Variables", x = "Number of Variables",
y = "R Squared and Adjusted R Squared") +
theme(plot.title = element_text(hjust = 0.5)) +
theme(legend.position = "bottom", legend.title = element_blank()) +
geom_vline(xintercept = 4, colour = "orchid4", linetype = "twodash")
with(airquality,
plot(Temp, type = "l"))
attach(airquality)
t_diff <- airquality$Temp[1:length(airquality$Temp)-1] - airquality$Temp[-1]
plot(t_diff, pch = 20, cex = 1.5, col = "red")
system.time({
colnames(df1) <- c("n", "R Squared", "Adjusted R Squared")
for(i in 1:length(n)) {
m <- lm(formula = (formula = Ozone ~ poly(Temp, i)), data = aq)
df1[i, 2] <- summary(m)$r.squared
df1[i, 3] <- summary(m)$adj.r.squared
}
})
system.time({
ggplot(data = df2, aes(x = n, y = value, colour = variable)) +
geom_line() +
labs(title = "Plot of R Squared and Adjusted R Squared against the Number
of Variables", x = "Number of Variables",
y = "R Squared and Adjusted R Squared") +
theme(plot.title = element_text(hjust = 0.5)) +
theme(legend.position = "bottom", legend.title = element_blank()) +
geom_vline(xintercept = 4, colour = "orchid4", linetype = "twodash")
})
load(airquality)
install.packages(c("RcppRoll", "highr", "later", "rmarkdown", "sp", "stringi", "xlsx", "zoo"))
d1 <- read.csv("F34.SI.csv")
d1 <- read.csv("F34.SI.csv", header = T)
d1 <- read.csv2("F34.SI.csv", header = T)
head(h1)
head(d1)
#remove null
d1 <- d1[complete.cases(d1),]
head(d1)
#remove null
d1 <- lapply(d1, function(x) {
gsub("null", "NA", x)
})
head(d1)
#remove null
d1 <- data.frame(lapply(d1, function(x) {
gsub("null", "NA", x)
})
)
head(d1)
d1 <- d1[complete.cases(d1),]
head(d1)
d1 <- na.omit(d1)
head(d1)
class(d1)
class(d1$Open)
?read.csv2
d1 <- read.csv2("F34.SI.csv", header = T,
colClasses = c("Date", "numeric", "numeric", "numeric",
"numeric", "numeric", "numeric"))
d1 <- read.csv2("F34.SI.csv", header = T, na.strings = "null",
colClasses = c("Date", "numeric", "numeric", "numeric",
"numeric", "numeric", "numeric"))
head(d1)
head(na.omit(d1))
#remove NA
d1 <- d1[complete.cases(d1), ]
head(d1)
?rev
d2 <- d1[rev(rownames(d1)),]
head(d2)
esp(mean(log(d1$Adj.Close)))
exp(mean(log(d1$Adj.Close)))
gm_mean <- function(a){prod(a)^(1/length(a))}
gm_mean(d1$Adj.Close)
gm_mean = function(x, na.rm=TRUE, zero.propagate = FALSE){
if(any(x < 0, na.rm = TRUE)){
return(NaN)
}
if(zero.propagate){
if(any(x == 0, na.rm = TRUE)){
return(0)
}
exp(mean(log(x), na.rm = na.rm))
} else {
exp(sum(log(x[x > 0]), na.rm=na.rm) / length(x))
}
}
gm_mean(d1$Adj.Close)
exp(mean(log(d1$Adj.Close)))
mean(d1$Adj.Close)
geo_mean <- function(x) {exp(mean(log(x)))}
geo_mean(d1$Adj.Close)
#in case zero exists in data
geo_mean <- function(x) {
log_data <- log(x)
gm <- exp(mean(log_data[is.finite(log_data)]))
return(gm)
}
geo_mean(d1$Adj.Close)
data(airquality)
names(airquality)
m1 <- lm(Ozone ~ Wind)
m1 <- lm(Ozone ~ Wind, data = airquality)
summary(m1)
coef(m1)
head(survival)
library(boot)
data(survival)
head(survival)
m1 <- lm(I(log(survival$surv)) ~ survival$dose)
summary(m1)
surv.fun <- function(data, i){
d <- data[i,]
d.reg <- lm(log(d$surv) ~ d$dose)
c(coef(d.reg))
}
surv.fun(survival, 1)
lm_fun <- function(data, i) {
d <- data[i,]
d_lm <- lm(d$Ozone ~ d$Wind)
c(coef(d_lm))
}
oz_boot <- boot(airquality, lm_fun, R = 999)
oz_boot
coef(m1)
library(boot)
data(survival)
m1 <- lm(I(log(survival$surv)) ~ survival$dose)
summary(m1)
surv.fun <- function(data, i){
d <- data[i,]
d.reg <- lm(log(d$surv) ~ d$dose)
c(coef(d.reg))
}
surv.boot <- boot(survival, surv.fun, R = 999)
surv.boot
data(airquality)
m1 <- lm(Ozone ~ Wind, data = airquality)
summary(m1)
coef(m1)
lm_fun <- function(data, i) {
d <- data[i,]
d_lm <- lm(d$Ozone ~ d$Wind)
c(coef(d_lm))
}
oz_boot <- boot(airquality, lm_fun, R = 999)
oz_boot
jack.after.boot(oz_boot, index = 2)
?boot
oz_boot <- boot(airquality, lm_fun, R = 10000)
oz_boot
names(airquality)
m1 <- lm(Ozone ~ Wind + Temp, data = airquality)
summary(m1)
coef(m1)
lm_fun <- function(data, i) {
d <- data[i,]
d_lm <- lm(d$Ozone ~ d$Wind + d$Temp)
c(coef(d_lm))
}
oz_boot <- boot(airquality, lm_fun, R = 10000)
oz_boot
jack.after.boot(oz_boot, index = 2)
jack.after.boot(oz_boot, index = 3)
# parameters
cols <- colorRampPalette(c("blue","yellow","red","black","green"))(11)
xmin = -2
xmax = 2
nx = 500
ymin = -1.5
ymax = 1.5
ny = 500
n=400
# variables
x <- seq(xmin, xmax, length.out=nx)
y <- seq(ymin, ymax, length.out=ny)
c <- outer(x,y*1i,FUN="+")
z <- matrix(0.0, nrow=length(x), ncol=length(y))
k <- matrix(0.0, nrow=length(x), ncol=length(y))
for (rep in 1:n) {
print(rep)
index <- which(Mod(z) < 2)
z[index] <- z[index]^2 + c[index]
k[index] <- k[index] + 1
}
image(x,y,k, col=cols)
image(x,y,k, col=cols)
# parameters
cols <- colorRampPalette(c("blue","yellow","red","black","green"))(11)
xmin = -2
xmax = 2
nx = 500
ymin = -1.5
ymax = 1.5
ny = 500
n=1000
# variables
x <- seq(xmin, xmax, length.out=nx)
y <- seq(ymin, ymax, length.out=ny)
c <- outer(x,y*1i,FUN="+")
z <- matrix(0.0, nrow=length(x), ncol=length(y))
k <- matrix(0.0, nrow=length(x), ncol=length(y))
for (rep in 1:n) {
print(rep)
index <- which(Mod(z) < 2)
z[index] <- z[index]^2 + c[index]
k[index] <- k[index] + 1
}
image(x,y,k, col=cols)
# parameters
cols <- colorRampPalette(c("blue","yellow","red","black","green"))(11)
xmin = -2
xmax = 2
nx = 500
ymin = -1.5
ymax = 1.5
ny = 500
n=1000
# variables
x <- seq(xmin, xmax, length.out=nx)
y <- seq(ymin, ymax, length.out=ny)
c <- outer(x,y*1i,FUN="+")
z <- matrix(0.0, nrow=length(x), ncol=length(y))
k <- matrix(0.0, nrow=length(x), ncol=length(y))
for (rep in 1:n) {
print(rep)
index <- which(Mod(z) < 2)
z[index] <- z[index]^2 + c[index]
k[index] <- k[index] + 1
}
image(x,y,k, col=cols)
??tm
install.packages("tm")
install.packages(c("RcppRoll", "httpuv", "later", "recipes", "sp", "stringi", "xlsx", "zoo"))
install.packages("RcppRoll")
install.packages("data.table", lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
install.packages("zoo")
install.packages("zoo")
install.packages("stringr", lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
install.packages("survival", lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
install.packages("dplyr")
?tm
??tm
#load file
library(data.table)
install.packages(c("ggplot2", "data.table", "dplyr", "shiny"))
install.packages(c("tidyverse", "tidytext", "glue", "zoo", "xts"))
install.packages(c("tidyverse", "tidytext", "glue", "zoo", "xts"))
install.packages(c("ggplot2", "data.table", "dplyr", "shiny"))
devtools::install_github("kevinushey/Kmisc")
install.packages("devtools")
install.packages("caret")
devtools::install_github("kevinushey/Kmisc")
install.packages(c("survival", "zoo", "xts", "data.table", "parallel", "Rcpp",
"reshape2", "RCurl", "knitr", "xlsx", "readr", "Hmisc",
"lubridate", "randomforest", "tm", "RMarkdown"))
install.packages(c("survival", "zoo", "xts", "data.table", "parallel", "Rcpp", "reshape2", "RCurl", "knitr", "xlsx", "readr", "Hmisc", "lubridate", "randomforest", "tm", "RMarkdown"))
library(Kmisc)
#set working directory
setwd("/Users/Petersiw/Desktop/Capstone")
#load en_US.blogs.txt
file_path <- "final/en_US/en_US.blogs.txt"
data1 <- readlines(file_path)
head(data1)
data1 <- fread("final/en_US/en_US.blogs.txt")
#load file
library(data.table)
data1 <- fread("final/en_US/en_US.blogs.txt")
install.packages("microbenchmark")
library(microbenchmark)
p <- microbenchmark(
base <- readLines(file_path),
kmisc <- readlines(file_path)
)
print(p)
View(p)
View(data1)
View(p)
#set working directory
setwd("/Users/Petersiw/Desktop/Capstone")
#download file
url1 <- "https://d396qusza40orc.cloudfront.net/
dsscapstone/dataset/Coursera-SwiftKey.zip"
if(!file.exists("Coursera-SwiftKey.zip")) {
download.file(url1, destfile = "Coursera-Swiftkey.zip")
}
#load en_US.blogs.txt
file_path <- "final/en_US/en_US.blogs.txt"
data1 <- readlines(file_path)
#load en_US.blogs.txt
library(Kmisc)
file_path <- "final/en_US/en_US.blogs.txt"
data1 <- readlines(file_path)
head(data1)
blogs_path <- "final/en_US/en_US.blogs.txt"
news_path <- "final/en_US/en_US.news.txt"
twitter_path <- "final/en_US/en_US.twitter.txt"
data_blog <- readlines(blogs_path)
data_news <- readlines(news_path)
data_twitter <- readlines(twitter_path)
data_twitter <- readlines(twitter_path)
rm(data1)
install.packages("tokenizers")
#tokenise text
library(tokenizers)
tokenize_words(head(data_twitter))
tokenize_words_stems(head(data_twitter))
tokenize_word_stems(head(data_twitter))
count_words(data_twitter)
library(tidytext)
tidy_data <- data_twitter %>%
unnest_tokens(word, text)
library(tidyverse)
tidy_data <- data_twitter %>%
unnest_tokens(word, text)
?unnest_tokens
